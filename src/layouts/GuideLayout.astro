---
import Layout from "./Layout.astro";

type Navigation = Record<string, { title: string; url: string }[]>;
type Heading = {
    depth: number;
    text: string;
    slug: string;
};

export function formatTitle(title: string): string {
    return title
        .split("-")
        .map((word) => word.charAt(0).toUpperCase() + word.slice(1))
        .join(" ");
}

export async function setup() {
    // setup navigation
    const markdownFiles = await Astro.glob("../pages/**/*.md");
    const navigation: Navigation = {};

    for (const file of markdownFiles) {
        const filePath = file.url;
        const [_, category] = filePath!.split("/");
        const formattedCategory = formatTitle(category);
        const formattedTitle = file.frontmatter.title;

        if (!navigation[formattedCategory]) {
            navigation[formattedCategory] = [];
        }

        navigation[formattedCategory].push({
            title: formattedTitle,
            url: filePath || "",
        });
    }

    // sort, make Get Started first, Guide second
    const sortedNavigation: Navigation = {};
    Object.keys(navigation)
        .sort((a, b) => {
            if (a === "Get Started") return -1;
            if (b === "Get Started") return 1;
            if (a === "Guide") return -1;
            if (b === "Guide") return 1;
            return 0;
        })
        .forEach((key) => {
            sortedNavigation[key] = navigation[key];
        });

    return {
        navigation: sortedNavigation,
        markdownFiles,
    };
}

const { frontmatter, headings } = Astro.props;
const { navigation } = await setup();
---

<Layout title={frontmatter.title} description={frontmatter.description}>
    <div class="pt-20 mx-auto px-4 sm:px-6 max-w-7xl">
        <div class="flex flex-col lg:grid lg:grid-cols-10">
            <!-- vertical navbar -->
            <div class="lg:col-span-2" transition:name="vertical-navbar">
                <aside
                    class="hidden overflow-y-auto lg:block lg:sticky py-8 lg:px-4 lg:-mx-4 lg:max-h-[calc(100vh-var(--header-height))] lg:top-[--header-height]"
                >
                    <div class="relative">
                        <nav class="flex flex-col">
                            {
                                Object.entries(navigation).map(
                                    ([category, links]) => (
                                        <div class="mb-4">
                                            <h3 class="text-lg font-bold mb-1 mt-0">
                                                {category}
                                            </h3>
                                            <ul class="list-disc list-inside">
                                                {links.map((link) => (
                                                    <li class="mb-2 pl-0">
                                                        <a
                                                            href={link.url}
                                                            class="no-target-blank text-white hover:underline"
                                                        >
                                                            {link.title}
                                                        </a>
                                                    </li>
                                                ))}
                                            </ul>
                                        </div>
                                    ),
                                )
                            }
                        </nav>
                    </div>
                </aside>
            </div>
            <div class="lg:col-span-8">
                <div class="flex flex-col lg:grid lg:grid-cols-10">
                    <div class="col-span-8 pr-10 pb-10 pt-8">
                        <slot />
                    </div>
                    <div
                        class="col-span-2 pt-8 lg:block lg:sticky lg:px-4 lg:-mx-4 lg:max-h-[calc(100vh-var(--header-height))] lg:top-[--header-height]"
                    >
                        <!-- TOC -->
                        <h3
                            class="text-lg font-bold mb-2 mt-0"
                            transition:name="Table of Content"
                        >
                            Table of Contents
                        </h3>
                        <ul class="list-outside list-disc text-sm">
                            {
                                headings.map(
                                    (heading: Heading, index: number) => {
                                        if (heading.depth === 1) return;
                                        const margin = `${(heading.depth - 1) * 2}rem`;
                                        return (
                                            <li
                                                style={{ marginLeft: margin }}
                                                class="mb-2 pl-0"
                                            >
                                                <a
                                                    href={`#${heading.slug}`}
                                                    class="no-target-blank text-white hover:underline"
                                                >
                                                    {heading.text}
                                                </a>
                                            </li>
                                        );
                                    },
                                )
                            }
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <style is:global>
        h1 {
            @apply text-3xl font-bold;
        }

        h2 {
            @apply mt-5 scroll-mt-[calc(20px+var(--header-height))] text-2xl font-bold;
        }

        h3 {
            @apply mt-5 scroll-mt-[calc(17px+var(--header-height))] text-xl font-bold;
        }

        p {
            @apply mb-2 mt-2 font-[system-ui] leading-6;
        }

        hr {
            @apply my-10 border-gray-500;
        }

        ul {
            @apply list-outside list-disc leading-7;
        }

        blockquote {
            @apply my-4 border-l-4 border-gray-500 pl-4;
        }

        a {
            @apply text-blue-400 hover:underline;
        }

        ul ul {
            @apply mb-2 ml-5 list-[circle];
        }

        ul li {
            @apply mb-1;
        }

        code {
            @apply mb-4 rounded-lg bg-[#303030] p-4;
        }
    </style>

    <script is:inline>
        // make all <a> attributes have target="_blank" except for Table of Contents
        document.querySelectorAll("a:not(.no-target-blank)").forEach((el) => {
            el.setAttribute("target", "_blank");
        });
    </script>
</Layout>
